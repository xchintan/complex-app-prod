# How to do routing of the service?
# How does Nginx decide where to route the requests?

# Teriminology:
#   React  Server is 'client' container
#   Express Server is 'server' container
#
# Brower will make following requests:
#   /index.html ./index.js (Should be handled by React server)
#   /values/all /values/current (should be routed to Express)

# React code - request using 'api' tag
    # complex-app/client/src
    # grep values * | grep "await axios.get"
    # Fib.js:    const values = await axios.get('/api/values/current');
    # Fib.js:    const seenIndexes = await axios.get('/api/values/all');

# Server code - doesn't use api prefix
#   complex-app/server
    # â–¶ grep app.get *
    # index.js:app.get('/', (req, res) => {
    # index.js:app.get('/values/all', async (req, res) => {
    # index.js:app.get('/values/current', async (req, res) => {
    # grep: node_modules: Is a directory


#   react-server to listen on 3000  - Deault config
#   express-server to listen on 5000 - Check code server/index.js

# Nginx listens on default port 80,any request coming with 'api' 
#   Route to server:5000
#   Else client:3000
#


upstream client {
    server client:3000;

}

upstream api {   
    server api:5000;
}


server {
    listen 80; #Configuration for Nginx

    location / {
        proxy_pass http://client;
    }
    
    location /api {
        rewrite /api/(.*) /$1 break; #To convert /api/values/all ---> /values/all
        proxy_pass http://api;
    }

    # Setup Websockets - check the errors ./web-socket-errors
    location /sockjs-node {  
        proxy_pass http://client;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";

    }
}

# Keyword after upstream refers to Container name: client, api
# So make sure it matches with docker-compose.yml 'service' name

#











